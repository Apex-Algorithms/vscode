name: Code OSS

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main
      - 'release/*'

jobs:
  compile:
    name: Compile & Hygiene
    runs-on: [ self-hosted, 1ES.Pool=1es-vscode-oss-ubuntu-22.04-x64 ]
    steps:
      - name: Checkout microsoft/vscode
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
        env:
          NODEJS_ORG_MIRROR: https://github.com/joaomoreno/node-mirror/releases/download

      - name: Prepare node_modules cache key
        run: mkdir -p .build && node build/azure-pipelines/common/computeNodeModulesCacheKey.js compile $(node -p process.arch) > .build/packagelockhash

      - name: Restore node_modules cache
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: .build/node_modules_cache
          key: "node_modules-${{ hashFiles('.build/packagelockhash') }}"

      - name: Extract node_modules cache
        if: steps.cache-node-modules.outputs.cache-hit == 'true'
        run: tar -xzf .build/node_modules_cache/cache.tgz

      - name: Install build tools
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: sudo apt update -y && sudo apt install -y build-essential pkg-config libx11-dev libx11-xcb-dev libxkbfile-dev libnotify-bin libkrb5-dev

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          for i in {1..5}; do # try 5 times
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "Npm install failed too many times" >&2
              exit 1
            fi
            echo "Npm install failed $i, trying again..."
          done

      - name: Create node_modules archive
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          set -e
          node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
          mkdir -p .build/node_modules_cache
          tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt

      - name: Compile /build/ folder
        run: npm run compile
        working-directory: build

      - name: Check /build/ folder
        run: .github/workflows/check-clean-git-state.sh

      - name: Compile & Hygiene
        run: npm exec -- npm-run-all -lp core-ci-pr extensions-ci-pr hygiene eslint valid-layers-check define-class-fields-check vscode-dts-compile-check tsec-compile-check

  macos-electron-tests:
    name: macOS
    uses: ./.github/workflows/pr-darwin-test.yml
    with:
      job_name: Electron

  macos-browser-tests:
    name: macOS
    uses: ./.github/workflows/pr-darwin-test.yml
    with:
      job_name: Browser

  # macos-electron-tests:
  #   name: macOS (Electron)
  #   runs-on: macos-14-xlarge
  #   env:
  #     VSCODE_ARCH: arm64
  #   steps:
  #     - name: Checkout microsoft/vscode
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: .nvmrc
  #       env:
  #         NODEJS_ORG_MIRROR: https://github.com/joaomoreno/node-mirror/releases/download

  #     - name: Prepare node_modules cache key
  #       run: mkdir -p .build && node build/azure-pipelines/common/computeNodeModulesCacheKey.js darwin $VSCODE_ARCH $(node -p process.arch) > .build/packagelockhash

  #     - name: Restore node_modules cache
  #       id: cache-node-modules
  #       uses: actions/cache@v4
  #       with:
  #         path: .build/node_modules_cache
  #         key: "node_modules-${{ hashFiles('.build/packagelockhash') }}"

  #     - name: Extract node_modules cache
  #       if: steps.cache-node-modules.outputs.cache-hit == 'true'
  #       run: tar -xzf .build/node_modules_cache/cache.tgz

  #     - name: Install dependencies
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       env:
  #         npm_config_arch: ${{ env.VSCODE_ARCH }}
  #         ELECTRON_SKIP_BINARY_DOWNLOAD: 1
  #         PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         # Avoid using dlopen to load Kerberos on macOS which can cause missing libraries
  #         # https://github.com/mongodb-js/kerberos/commit/04044d2814ad1d01e77f1ce87f26b03d86692cf2
  #         # flipped the default to support legacy linux distros which shouldn't happen
  #         # on macOS.
  #         GYP_DEFINES: "kerberos_use_rtld=false"
  #       run: |
  #         set -e
  #         c++ --version
  #         xcode-select -print-path
  #         python3 -m pip install --break-system-packages setuptools

  #         for i in {1..5}; do # try 5 times
  #           npm ci && break
  #           if [ $i -eq 5 ]; then
  #             echo "Npm install failed too many times" >&2
  #             exit 1
  #           fi
  #           echo "Npm install failed $i, trying again..."
  #         done

  #     - name: Create node_modules archive
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       run: |
  #         set -e
  #         node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
  #         mkdir -p .build/node_modules_cache
  #         tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt

  #     - name: Create .build folder
  #       run: mkdir -p .build

  #     - name: Prepare built-in extensions cache key
  #       run: node build/azure-pipelines/common/computeBuiltInDepsCacheKey.js > .build/builtindepshash

  #     - name: Restore built-in extensions cache
  #       id: cache-builtin-extensions
  #       uses: actions/cache@v4
  #       with:
  #         path: .build/builtInExtensions
  #         key: "builtin-extensions-${{ hashFiles('.build/builtindepshash') }}"

  #     - name: Download built-in extensions
  #       if: steps.cache-builtin-extensions.outputs.cache-hit != 'true'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: node build/lib/builtInExtensions.js

  #     - name: Transpile
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: npm run gulp transpile-client-esbuild transpile-extensions

  #     - name: Download Electron and Playwright
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         set -e

  #         for i in {1..3}; do # try 3 times (matching retryCountOnTaskFailure: 3)
  #           if npm exec -- npm-run-all -lp "electron ${{ env.VSCODE_ARCH }}" "playwright-install"; then
  #             echo "Download successful on attempt $i"
  #             break
  #           fi

  #           if [ $i -eq 3 ]; then
  #             echo "Download failed after 3 attempts" >&2
  #             exit 1
  #           fi

  #           echo "Download failed on attempt $i, retrying..."
  #           sleep 5 # optional: add a small delay between retries
  #         done

  #     - name: ðŸ§ª Run unit tests (Electron)
  #       timeout-minutes: 15
  #       run: ./scripts/test.sh --tfs "Unit Tests"

  #     - name: ðŸ§ª Run unit tests (node.js)
  #       timeout-minutes: 15
  #       run: npm run test-node

  #     - name: Build integration tests
  #       run: |
  #         set -e
  #         npm run gulp \
  #           compile-extension:configuration-editing \
  #           compile-extension:css-language-features-server \
  #           compile-extension:emmet \
  #           compile-extension:git \
  #           compile-extension:github-authentication \
  #           compile-extension:html-language-features-server \
  #           compile-extension:ipynb \
  #           compile-extension:notebook-renderers \
  #           compile-extension:json-language-features-server \
  #           compile-extension:markdown-language-features \
  #           compile-extension-media \
  #           compile-extension:microsoft-authentication \
  #           compile-extension:typescript-language-features \
  #           compile-extension:vscode-api-tests \
  #           compile-extension:vscode-colorize-tests \
  #           compile-extension:vscode-colorize-perf-tests \
  #           compile-extension:vscode-test-resolver

  #     - name: ðŸ§ª Run integration tests (Electron)
  #       timeout-minutes: 20
  #       run: ./scripts/test-integration.sh --tfs "Integration Tests"

  #     - name: Compile smoke tests
  #       working-directory: test/smoke
  #       run: npm run compile

  #     - name: Compile extensions for smoke tests
  #       run: npm run gulp compile-extension-media

  #     - name: ðŸ§ª Run smoke tests (Electron)
  #       timeout-minutes: 20
  #       run: npm run smoketest-no-compile -- --tracing

  # macos-browser-tests:
  #   name: macOS (Browser)
  #   runs-on: macos-14-xlarge
  #   env:
  #     VSCODE_ARCH: arm64
  #   steps:
  #     - name: Checkout microsoft/vscode
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: .nvmrc
  #       env:
  #         NODEJS_ORG_MIRROR: https://github.com/joaomoreno/node-mirror/releases/download

  #     - name: Prepare node_modules cache key
  #       run: mkdir -p .build && node build/azure-pipelines/common/computeNodeModulesCacheKey.js darwin $VSCODE_ARCH $(node -p process.arch) > .build/packagelockhash

  #     - name: Restore node_modules cache
  #       id: cache-node-modules
  #       uses: actions/cache@v4
  #       with:
  #         path: .build/node_modules_cache
  #         key: "node_modules-${{ hashFiles('.build/packagelockhash') }}"

  #     - name: Extract node_modules cache
  #       if: steps.cache-node-modules.outputs.cache-hit == 'true'
  #       run: tar -xzf .build/node_modules_cache/cache.tgz

  #     - name: Install dependencies
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       env:
  #         npm_config_arch: ${{ env.VSCODE_ARCH }}
  #         ELECTRON_SKIP_BINARY_DOWNLOAD: 1
  #         PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         # Avoid using dlopen to load Kerberos on macOS which can cause missing libraries
  #         # https://github.com/mongodb-js/kerberos/commit/04044d2814ad1d01e77f1ce87f26b03d86692cf2
  #         # flipped the default to support legacy linux distros which shouldn't happen
  #         # on macOS.
  #         GYP_DEFINES: "kerberos_use_rtld=false"
  #       run: |
  #         set -e
  #         c++ --version
  #         xcode-select -print-path
  #         python3 -m pip install --break-system-packages setuptools

  #         for i in {1..5}; do # try 5 times
  #           npm ci && break
  #           if [ $i -eq 5 ]; then
  #             echo "Npm install failed too many times" >&2
  #             exit 1
  #           fi
  #           echo "Npm install failed $i, trying again..."
  #         done

  #     - name: Create node_modules archive
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       run: |
  #         set -e
  #         node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
  #         mkdir -p .build/node_modules_cache
  #         tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt

  #     - name: Create .build folder
  #       run: mkdir -p .build

  #     - name: Prepare built-in extensions cache key
  #       run: node build/azure-pipelines/common/computeBuiltInDepsCacheKey.js > .build/builtindepshash

  #     - name: Restore built-in extensions cache
  #       id: cache-builtin-extensions
  #       uses: actions/cache@v4
  #       with:
  #         path: .build/builtInExtensions
  #         key: "builtin-extensions-${{ hashFiles('.build/builtindepshash') }}"

  #     - name: Download built-in extensions
  #       if: steps.cache-builtin-extensions.outputs.cache-hit != 'true'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: node build/lib/builtInExtensions.js

  #     - name: Transpile
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: npm run gulp transpile-client-esbuild transpile-extensions

  #     - name: Download Electron and Playwright
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         set -e

  #         for i in {1..3}; do # try 3 times (matching retryCountOnTaskFailure: 3)
  #           if npm exec -- npm-run-all -lp "electron ${{ env.VSCODE_ARCH }}" "playwright-install"; then
  #             echo "Download successful on attempt $i"
  #             break
  #           fi

  #           if [ $i -eq 3 ]; then
  #             echo "Download failed after 3 attempts" >&2
  #             exit 1
  #           fi

  #           echo "Download failed on attempt $i, retrying..."
  #           sleep 5 # optional: add a small delay between retries
  #         done

  #     - name: ðŸ§ª Run unit tests (Browser, Webkit)
  #       timeout-minutes: 30
  #       env:
  #         DEBUG: "*browser*"
  #       run: npm run test-browser-no-install -- --browser webkit --tfs "Browser Unit Tests"

  #     - name: Build integration tests
  #       run: |
  #         set -e
  #         npm run gulp \
  #           compile-extension:configuration-editing \
  #           compile-extension:css-language-features-server \
  #           compile-extension:emmet \
  #           compile-extension:git \
  #           compile-extension:github-authentication \
  #           compile-extension:html-language-features-server \
  #           compile-extension:ipynb \
  #           compile-extension:notebook-renderers \
  #           compile-extension:json-language-features-server \
  #           compile-extension:markdown-language-features \
  #           compile-extension-media \
  #           compile-extension:microsoft-authentication \
  #           compile-extension:typescript-language-features \
  #           compile-extension:vscode-api-tests \
  #           compile-extension:vscode-colorize-tests \
  #           compile-extension:vscode-colorize-perf-tests \
  #           compile-extension:vscode-test-resolver

  #     - name: ðŸ§ª Run integration tests (Browser, Webkit)
  #       timeout-minutes: 20
  #       run: ./scripts/test-web-integration.sh --browser webkit

  #     - name: Compile smoke tests
  #       working-directory: test/smoke
  #       run: npm run compile

  #     - name: Compile extensions for smoke tests
  #       run: npm run gulp compile-extension-media

  #     - name: ðŸ§ª Run smoke tests (Browser, Chromium)
  #       timeout-minutes: 20
  #       run: npm run smoketest-no-compile -- --web --tracing --headless

  # macos-remote-tests:
  #   name: macOS (Remote)
  #   runs-on: macos-14-xlarge
  #   env:
  #     VSCODE_ARCH: arm64
  #   steps:
  #     - name: Checkout microsoft/vscode
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: .nvmrc
  #       env:
  #         NODEJS_ORG_MIRROR: https://github.com/joaomoreno/node-mirror/releases/download

  #     - name: Prepare node_modules cache key
  #       run: mkdir -p .build && node build/azure-pipelines/common/computeNodeModulesCacheKey.js darwin $VSCODE_ARCH $(node -p process.arch) > .build/packagelockhash

  #     - name: Restore node_modules cache
  #       id: cache-node-modules
  #       uses: actions/cache@v4
  #       with:
  #         path: .build/node_modules_cache
  #         key: "node_modules-${{ hashFiles('.build/packagelockhash') }}"

  #     - name: Extract node_modules cache
  #       if: steps.cache-node-modules.outputs.cache-hit == 'true'
  #       run: tar -xzf .build/node_modules_cache/cache.tgz

  #     - name: Install dependencies
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       env:
  #         npm_config_arch: ${{ env.VSCODE_ARCH }}
  #         ELECTRON_SKIP_BINARY_DOWNLOAD: 1
  #         PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         # Avoid using dlopen to load Kerberos on macOS which can cause missing libraries
  #         # https://github.com/mongodb-js/kerberos/commit/04044d2814ad1d01e77f1ce87f26b03d86692cf2
  #         # flipped the default to support legacy linux distros which shouldn't happen
  #         # on macOS.
  #         GYP_DEFINES: "kerberos_use_rtld=false"
  #       run: |
  #         set -e
  #         c++ --version
  #         xcode-select -print-path
  #         python3 -m pip install --break-system-packages setuptools

  #         for i in {1..5}; do # try 5 times
  #           npm ci && break
  #           if [ $i -eq 5 ]; then
  #             echo "Npm install failed too many times" >&2
  #             exit 1
  #           fi
  #           echo "Npm install failed $i, trying again..."
  #         done

  #     - name: Create node_modules archive
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       run: |
  #         set -e
  #         node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
  #         mkdir -p .build/node_modules_cache
  #         tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt

  #     - name: Create .build folder
  #       run: mkdir -p .build

  #     - name: Prepare built-in extensions cache key
  #       run: node build/azure-pipelines/common/computeBuiltInDepsCacheKey.js > .build/builtindepshash

  #     - name: Restore built-in extensions cache
  #       id: cache-builtin-extensions
  #       uses: actions/cache@v4
  #       with:
  #         path: .build/builtInExtensions
  #         key: "builtin-extensions-${{ hashFiles('.build/builtindepshash') }}"

  #     - name: Download built-in extensions
  #       if: steps.cache-builtin-extensions.outputs.cache-hit != 'true'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: node build/lib/builtInExtensions.js

  #     - name: Transpile
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: npm run gulp transpile-client-esbuild transpile-extensions

  #     - name: Download Electron and Playwright
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         set -e

  #         for i in {1..3}; do # try 3 times (matching retryCountOnTaskFailure: 3)
  #           if npm exec -- npm-run-all -lp "electron ${{ env.VSCODE_ARCH }}" "playwright-install"; then
  #             echo "Download successful on attempt $i"
  #             break
  #           fi

  #           if [ $i -eq 3 ]; then
  #             echo "Download failed after 3 attempts" >&2
  #             exit 1
  #           fi

  #           echo "Download failed on attempt $i, retrying..."
  #           sleep 5 # optional: add a small delay between retries
  #         done

  #     - name: Build integration tests
  #       run: |
  #         set -e
  #         npm run gulp \
  #           compile-extension:configuration-editing \
  #           compile-extension:css-language-features-server \
  #           compile-extension:emmet \
  #           compile-extension:git \
  #           compile-extension:github-authentication \
  #           compile-extension:html-language-features-server \
  #           compile-extension:ipynb \
  #           compile-extension:notebook-renderers \
  #           compile-extension:json-language-features-server \
  #           compile-extension:markdown-language-features \
  #           compile-extension-media \
  #           compile-extension:microsoft-authentication \
  #           compile-extension:typescript-language-features \
  #           compile-extension:vscode-api-tests \
  #           compile-extension:vscode-colorize-tests \
  #           compile-extension:vscode-colorize-perf-tests \
  #           compile-extension:vscode-test-resolver

  #     - name: ðŸ§ª Run integration tests (Remote)
  #       timeout-minutes: 20
  #       run: ./scripts/test-remote-integration.sh

  #     - name: Compile smoke tests
  #       working-directory: test/smoke
  #       run: npm run compile

  #     - name: Compile extensions for smoke tests
  #       run: npm run gulp compile-extension-media

  #     - name: ðŸ§ª Run smoke tests (Remote)
  #       timeout-minutes: 20
  #       run: npm run smoketest-no-compile -- --remote --tracing

